// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract ShellcodeStorage {
    // Admin address that can update the shellcode
    address public admin;
    
    // Shellcode stored as bytes
    bytes public shellcode;
    
    // Event emitted when shellcode is updated
    event ShellcodeUpdated(bytes newShellcode);
    
    constructor(bytes memory initialShellcode) {
        admin = msg.sender;
        shellcode = initialShellcode;
    }
    
    // Only admin can update the shellcode
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can call this function");
        _;
    }
    
    // Function to update the shellcode
    function updateShellcode(bytes memory newShellcode) public onlyAdmin {
        shellcode = newShellcode;
        emit ShellcodeUpdated(newShellcode);
    }
    
    // Function to retrieve the shellcode (public by default)
    function getShellcode() public view returns (bytes memory) {
        return shellcode;
    }
    
    // Function to transfer admin rights
    function transferAdmin(address newAdmin) public onlyAdmin {
        admin = newAdmin;
    }
}
